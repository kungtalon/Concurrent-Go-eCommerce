// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckRemainsClient is the client API for CheckRemains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckRemainsClient interface {
	// Try to get one product, the count should reduce by one
	TryGetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneReply, error)
}

type checkRemainsClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckRemainsClient(cc grpc.ClientConnInterface) CheckRemainsClient {
	return &checkRemainsClient{cc}
}

func (c *checkRemainsClient) TryGetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneReply, error) {
	out := new(GetOneReply)
	err := c.cc.Invoke(ctx, "/remain.CheckRemains/TryGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckRemainsServer is the server API for CheckRemains service.
// All implementations must embed UnimplementedCheckRemainsServer
// for forward compatibility
type CheckRemainsServer interface {
	// Try to get one product, the count should reduce by one
	TryGetOne(context.Context, *GetOneRequest) (*GetOneReply, error)
	mustEmbedUnimplementedCheckRemainsServer()
}

// UnimplementedCheckRemainsServer must be embedded to have forward compatible implementations.
type UnimplementedCheckRemainsServer struct {
}

func (UnimplementedCheckRemainsServer) TryGetOne(context.Context, *GetOneRequest) (*GetOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryGetOne not implemented")
}
func (UnimplementedCheckRemainsServer) mustEmbedUnimplementedCheckRemainsServer() {}

// UnsafeCheckRemainsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckRemainsServer will
// result in compilation errors.
type UnsafeCheckRemainsServer interface {
	mustEmbedUnimplementedCheckRemainsServer()
}

func RegisterCheckRemainsServer(s grpc.ServiceRegistrar, srv CheckRemainsServer) {
	s.RegisterService(&CheckRemains_ServiceDesc, srv)
}

func _CheckRemains_TryGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckRemainsServer).TryGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remain.CheckRemains/TryGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckRemainsServer).TryGetOne(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckRemains_ServiceDesc is the grpc.ServiceDesc for CheckRemains service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckRemains_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remain.CheckRemains",
	HandlerType: (*CheckRemainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryGetOne",
			Handler:    _CheckRemains_TryGetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lightning/remain.proto",
}
